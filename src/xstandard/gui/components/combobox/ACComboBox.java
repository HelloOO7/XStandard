package xstandard.gui.components.combobox;

import xstandard.util.ListenableList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JComboBox;

public class ACComboBox<T> extends javax.swing.JPanel {

	public ACComboBox() {
		initComponents();
	}
	
	public JComboBox getCB(){
		return cb;
	}
	
	public void setACAlphabeticSort(boolean v){
		cb.setACAlphabeticSort(v);
	}
	
	public boolean getACAlphabeticSort(){
		return cb.getACAlphabeticSort();
	}
	
	public void setACComparator(Comparator<T> comp) {
		cb.setACComparator(comp);
	}
	
	public Comparator<T> getACComparator() {
		return cb.getACComparator();
	}
	
	public void setACMode(ComboBoxExInternal.ACMode mode) {
		cb.setACMode(mode);
	}
	
	public int getSelectedIndex() {
        return cb.getSelectedIndexEx();
    }

    public void setSelectedIndex(int index) {
        cb.setSelectedIndexEx(index);
    }
	
	public void setUseEqualsAnyway(boolean value) {
		cb.setUseEqualsAnyway(value);
	}
	
	public void removeAllItems(){
		cb.removeAllItems();
	}
	
	public void addItem(T item){
		cb.addItem(item);
	}
	
	public int getItemCount(){
		return cb.getItemCountEx();
	}

    public Object getSelectedItem() {
        return cb.getSelectedItem();
    }

    public void setSelectedItem(T item) {
        cb.setSelectedItem(item);
    }

    public void setMaximumRowCount(int rowCount) {
        cb.setMaximumRowCount(rowCount);
    }
	
	public void loadValues(T... values){
		cb.loadValues(values);
	}
	
	public void loadValuesIndexed(T... values){
		cb.loadValuesIndexed(values);
	}
	
	public void loadValues(List<T> values){
		cb.loadValues(values);
	}
	
	public void loadValuesListenable(ListenableList<T> values){
		cb.loadValuesListenable(values);
	}
	
	public void addListener(ComboBoxExInternal.ComboBoxListener listener){
		cb.addListener(listener);
	}
	
	@Override
	public void setEnabled(boolean val) {
		super.setEnabled(val);
		cb.setEnabled(val);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cb = new xstandard.gui.components.combobox.ComboBoxExInternal<>();

        cb.setMaximumRowCount(25);
        cb.setACAlphabeticSort(true);
        cb.setACMode(xstandard.gui.components.combobox.ComboBoxExInternal.ACMode.CONTAINS);
        cb.setAllowAC(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private xstandard.gui.components.combobox.ComboBoxExInternal<T> cb;
    // End of variables declaration//GEN-END:variables
}
